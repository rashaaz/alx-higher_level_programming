The ``1-my_list`` module
============================

Using ``1-mylist``
---------------------

Import function from module:
    >>> MyList = __import__('1-my_list').MyList

right Type test:
    >>> rs = MyList()
    >>> type(rs) == MyList
    True

right Instance test:
    >>> rs = MyList()
    >>> isinstance(rs, list)
    True

Check if print_sorted is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called via class with no args:
    >>> rs.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg should raise exception:
    >>> rs.print_sorted([6, 4, 7])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method called with 2 args should raise an exception:
    >>> rs.print_sorted([6, 4, 7], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Empty list print_sorted method:
    >>> rs = MyList()
    >>> rs.print_sorted()
    []

Normal list print_sorted method:
    >>> rs = MyList([4, 11, 3])
    >>> rs.print_sorted()
    [3, 4, 11]

Normal list 2 print_sorted method:
    >>> rs = MyList([6, 4, 8, 7, 5])
    >>> rs.print_sorted()
    [4, 5, 6, 7, 8]

Negative integers list print_sorted method:
    >>> rs = MyList([-10, -5, -20, 0, -15])
    >>> rs.print_sorted()
    [-20, -15, -10, -5, 0]

Original list remains unchanged:
    >>> rs = MyList([3, 15, 2, -5, 30])
    >>> rs.print_sorted()
    [-5, 2, 3, 15, 30]
    >>> rs
    [3, 15, 2, -5, 30]

List already in sorted order:
    >>> rs = MyList([-1, 0, 1, 2, 11, 21, 101])
    >>> rs.print_sorted()
    [-1, 0, 1, 2, 11, 21, 101]

Append operation test:
    >>> rs = MyList()
    >>> rs.append(20)
    >>> rs
    [20]
