#!/usr/bin/python3
"""Unit tests for the max_integer function covering different scenarios.
"""
import unittest
max_integer = __import__('6-max_integer').max_integer


class TestMaxInteger(unittest.TestCase):
    """Unit tests for the max_integer function"""
    def test_no_argument(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer(), None)

    def test_emp_lis(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([]), None)

    def test_first(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([99]), 99)

    def test_ident_elements(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([4, 4, 4, 4]), 4)

    def test_maximum_at_beginning(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([5, 4, 3, 2]), 5)

    def test_order_seque(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([5, 6, 7, 8]), 8)

    def test_large_ordered_sequence(self):
        """Unit tests for the max_integer function."""
        self.assertEqual(max_integer([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]), 20)

    def test_unordered_sequence(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([1, 3, 4, 2]), 4)

    def test_larg_unor_seq(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([30, 60, 90, 20, 1000, 80, 95,
                                     110, 250, 500]), 1000)

    def test_pos_a_net(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(
            max_integer([-30, 60, 95, 20, -1000, 85, 100, 110, -250, -500]),
            110)

    def test_ps_d_neas_rg(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(
            max_integer(
                [-6300, 9700, -8600, 4400, 6200, -2000, -9400, -6300,
                    7400, -2500, 5700, 2300, 70, 7900, -5500, 7700, -7000,
                    -6600, 700, -8700, 9600, -1100, 4700, -1300, 9100,
                    -8400, 9700, 1600, -4900, -2000, -6900, 2200, -7300,
                    -1100, -400, 9300, 9500, -2700, -9200, 4400, 2900, -6700,
                    -7800, 3000, 1600, 3300, 7200, 1700, -1900, 4900, 4300,
                    7000, 500, 3400, -7200, -1600, 2200, -4500, -3100,
                    -6700, -500, 9800, 4200, -8000, 320, 1800, -1900, -9800,
                    30, 3600, 1100, 6700, 4800, -9400, -5900, -9600, -2100,
                    -4000, 5700, 5100, -2100, -4800, -4100, 6400, -9300,
                    -9300, 8500, 3500, 3400, 7900, 210, -2900, 6300, -5400,
                    800, -3400, -2500, -3300, 6900, 9600]), 9800)

    def test_ntes(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(
            max_integer(
                [-6105600, -850000, -560000, -3088000, -6700000, -4800000,
                    -1907000, -8100000, -6601000, -5800000, -4700000,
                    -8433000, -7251000, -5117000, -2979000, -1335000,
                    -6867200, -9073600, -6224700, -1080000, -1080200,
                    -6801200, -8351900, -1736000, -7461000, -4376000,
                    -967800, -4663600, -71000, -7153600, -8038000,
                    -7893000, -9350800, -1132000, -3675900, -8495300,
                    -9158200, -9310000, -6319500, -8961200, -4906000,
                    -386400, -639900, -2676900, -6881600, -6258000,
                    -5490600, -1107200, -4199100, -5933500, -9917600,
                    -7759800, -7045700, -4885700, -9485000, -5119500,
                    -4147000, -7622800, -4671900, -5439500, -840400,
                    -3671700, -4400000, -3549300, -9146000, -6071600,
                    -7213200, -1307400, -3936000, -2415500, -9162600,
                    -6129900, -5791400, -3481800, -7828800, -6954700,
                    -5272900, -4952500, -6115500, -8333400, -7271400,
                    -4097000, -4342500, -8400500, -8235000, -4373800,
                    -8054200, -8565500, -639200, -2292400, -4269500,
                    -7202800, -6891000, -4379700, -7955100, -1536500,
                    -2839000, -2586600, -9941000, -3136600]), -71000)

    def test_i_ad_flts(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(
            max_integer(
                [5, 77.7, -50, -10, 800, 8888, -50000, 7777.7]), 8888)

    def test_is_an_fls_lge(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(
            max_integer(
                [199872.7619047619, 115249.8813559322, 37972.944444444445,
                    120549.90322580645, 30889.777777777777, 986136.4,
                    393382.5416666667, 15441.826086956522, 2503567,
                    176118.87179487178, 372359.4, 142747.61538461538,
                    383318.8181818182, 297732.2727272727, 104980.52702702703,
                    98409.27272727272, 617459.875, 56556.62162162162, 61958.8,
                    115000.59090909091, 240958.45714285714,
                    101071.85714285714, 77616.47692307692, 89029.64,
                    104941.96666666666, 31940.53846153846, 106652.10126582278,
                    686700.1538461539, 52758.709677419356, 348259.4285714286,
                    89457.28947368421, 58039.52702702703, 306427.53571428574,
                    64379.01176470588, 557699.5333333333, 18718.639344262294,
                    364967.55555555556, 129951.23404255319, 41683.82692307692,
                    139149.9818181818, 356782.86666666664, 100259.07692307692,
                    245204.75, 78972.5306122449, 404825.8888888889, 124364.25,
                    1065047.5, 42946.45614035088, 73670.8813559322,
                    83546.51351351352, 323098.3333333333, 88578.35294117648,
                    89471.0, 47745.197916666664, 17102.676767676767,
                    127735.80882352941, 110513.05882352941,
                    62214.055555555555, 6968.981481481482, 40691.34693877551,
                    69931.09677419355, 67024.44186046511, 112123.04,
                    1167186.0, 140392.05, 15814.362637362638,
                    88923.34444444445, 114726.20731707317, 143303.55,
                    38233.83516483517, 94065.72857142857, 42789.892857142855,
                    44182.47169811321, 41313.101265822785, 67705.18965517242,
                    1222423.5, 44966.55405405405, 37153.6, 82085.08,
                    559793.2857142857, 30031.58823529412, 126947.4262295082,
                    309222.3125, 125132.82089552238, 37276.27397260274,
                    99726.62903225806, 4270.788235294118, 490468.4375,
                    54086.642857142855, 73068.5, 108526.5081967213, 52943.875,
                    128534.875, 61069.433333333334, 37142.71951219512,
                    51481.13114754098, 571618.5, 35977.166666666664,
                    142333.11764705883, 199123.75]), 2503567)

    def test_fls(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(
            max_integer(
                [.00123, .457568, .02345, .23423434, .45675674, .678678,
                    .867090, .74653, .5745375]), 0.86709)

    def test_flts_lge(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(
            max_integer(
                [0.36701449486981136, 0.22932193120425423, 17.269673745943177,
                    0.6021998063297004, 7.040663644666581, 0.318418153098476,
                    0.14782568486828354, 1.694150096609713, 0.523292479047324,
                    6.577278388003499, 0.03165696316739835,
                    0.9723205356754642, 1.0167973840532782,
                    0.17994528432150622, 0.34268959203149724,
                    0.8237893847200373, 6.564703466354198, 0.650943204479027,
                    1.8902940005294793, 7.691604865311827, 8.897302744173896,
                    1.0780411284398352, 1.6564018996809176,
                    0.7495378363397325, 0.6460418901123863,
                    0.29656944388569284, 1.2020859950744733,
                    2.695758513783994, 0.37293339285604976,
                    0.8540047898304736, 0.16021193325291794,
                    0.027891891117170508, 0.8464685760135892,
                    4.506719557284897, 2.0258041087808, 4.525163681550944,
                    1.3277284362225874, 3.042753010712081, 2.4201460936424986,
                    0.6254206993310946, 3.6037820704785766,
                    0.5843942753272469, 2.994055932449279, 0.5168645505697169,
                    0.014982685631661026, 0.02477737364433171,
                    0.47120480947220955, 2.5056796257122915,
                    1.3349487122618868, 0.08451917751917885,
                    1.0157082402123356, 29.496355326217376,
                    10.171800729369348, 1.1263544935158727,
                    0.47572929035550277, 3.712323073375754,
                    0.5742929278531704, 0.43940976988732966,
                    0.09537099783126887, 1.4936141049902174,
                    5.764320019082692, 4.322880498170903, 2.004237813008687,
                    0.5565243581024599, 4.302022962278392, 5.680293004785562,
                    2.178866303290743, 1.0390412554953965,
                    0.45132551361896317, 1.4643609109467473,
                    0.6904822043628014, 7.42850599670902, 0.8174242076055683,
                    0.6560986886071569, 0.6513016647379839, 0.7402037152516,
                    1.3480227709351067, 10.667222236398727,
                    1.1255361340134915, 0.3631658619504303,
                    0.8812949657884553, 1.1100323642668828,
                    5.0119643460188845, 2.8953551308720056,
                    2.5574324632368866, 9.169493642307119, 0.4175692708444569,
                    2.344748944605401, 1.1674261590629318, 0.6998588019912835,
                    0.42770576125452897, 1.7136005979522013,
                    8.877571036363525, 0.6825287480571863, 2.6834294650218338,
                    0.7504024417975861, 0.2762206358275793,
                    0.20607476376994402, 0.9497689034126077,
                    2.1498649449691807]), 29.496355326217376)

    def test_ma_iner_wh_nuic_sng(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer("467843259"), "9")

    def test_max_integer_with_string(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer("rasha"), "s")

    def test_max_integer_with_nested_lists(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([[], [2], [6], [3, 9]]), [6])

    def test_ssstr_listtt(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(
            max_integer([["foo"], ["boo"], ["abc"], ["sic"], ["ric"]]),
            ["sic"])

    def test_inf(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([99, float('inf'), float('-inf')]),
                         float('inf'))

    def test_nan(self):
        """Unit tests for the max_integer function"""
        self.assertEqual(max_integer([99, float('nan'), 100]), 100)

    def test_mix_lt(self):
        """Unit tests for the max_integer function"""
        with self.assertRaises(TypeError):
            max_integer([[], [2], [4], [2, 9], 99, "bar"])

    def test_mi_lit_int_sr(self):
        """Unit tests for the max_integer function"""
        with self.assertRaises(TypeError):
            max_integer([99, "bar"])

    def test_none(self):
        """Unit tests for the max_integer function"""
        with self.assertRaises(TypeError):
            max_integer(None)

    def test_d(self):
        """Unit tests for the max_integer function"""
        with self.assertRaises(TypeError):
            max_integer([{1: 5, 8: 12}, {"x": "y"}])

    def test_int(self):
        """Unit tests for the max_integer function"""
        with self.assertRaises(TypeError):
            max_integer(98)

    def test_fm(self):
        """Unit tests for the max_integer function"""
        with self.assertRaises(TypeError):
            max_integer(9.8)


if __name__ == '__main__':
    unittest.main()
